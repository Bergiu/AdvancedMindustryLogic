import ../trigonometry.amnd

struct Vec3D(x, y, z)

function Vec3D::rot_x(Vec3D Vec3D::rot_x::this, Vec3D::rot_x::alpha, Vec3D *Vec3D::rot_x::out) {
    # Rotates a vector on the x axis
    Vec3D::rot_x::sina = sin(Vec3D::rot_x::alpha)
    Vec3D::rot_x::cosa = cos(Vec3D::rot_x::alpha)
    Vec3D::rot_x::out.x = Vec3D::rot_x::this.x
    Vec3D::rot_x::out.y = Vec3D::rot_x::cosa * Vec3D::rot_x::this.y - Vec3D::rot_x::sina * Vec3D::rot_x::this.z
    Vec3D::rot_x::out.z = Vec3D::rot_x::sina * Vec3D::rot_x::this.y + Vec3D::rot_x::cosa * Vec3D::rot_x::this.z
}

function Vec3D::rot_y(Vec3D Vec3D::rot_y::this, Vec3D::rot_y::alpha, Vec3D *Vec3D::rot_y::out) {
    # Rotates a vector on the y axis
    Vec3D::rot_y::sina = sin(Vec3D::rot_y::alpha)
    Vec3D::rot_y::cosa = cos(Vec3D::rot_y::alpha)
    Vec3D::rot_y::out.x = Vec3D::rot_y::cosa * Vec3D::rot_y::this.x + Vec3D::rot_y::sina * Vec3D::rot_y::this.z
    Vec3D::rot_y::out.y = Vec3D::rot_y::this.y
    Vec3D::rot_y::out.z = Vec3D::rot_y::cosa * Vec3D::rot_y::this.z - Vec3D::rot_y::sina * Vec3D::rot_y::this.x
}

function Vec3D::rot_z(Vec3D Vec3D::rot_y::this, Vec3D::rot_y::alpha, Vec3D *Vec3D::rot_y::out) {
    # Rotates a vector on the z axis
    Vec3D::rot_y::sina = sin(Vec3D::rot_y::alpha)
    Vec3D::rot_y::cosa = cos(Vec3D::rot_y::alpha)
    Vec3D::rot_y::out.x = Vec3D::rot_y::cosa * Vec3D::rot_y::this.x - Vec3D::rot_y::sina * Vec3D::rot_y::this.y
    Vec3D::rot_y::out.y = Vec3D::rot_y::sina * Vec3D::rot_y::this.x + Vec3D::rot_y::cosa * Vec3D::rot_y::this.y
    Vec3D::rot_y::out.z = Vec3D::rot_y::this.z
}

function Vec3D::scale(Vec3D Vec3D::scale::a, Vec3D::scale::scalar, Vec3D *Vec3D::scale::out) {
    Vec3D::scale::out.x = Vec3D::scale::a.x * Vec3D::scale::scalar
    Vec3D::scale::out.y = Vec3D::scale::a.y * Vec3D::scale::scalar
    Vec3D::scale::out.z = Vec3D::scale::a.z * Vec3D::scale::scalar
}

function Vec3D::add(Vec3D Vec3D::add::a, Vec3D Vec3D::add::b, Vec3D *Vec3D::add::out) {
    Vec3D::add::out.x = Vec3D::add::a.x + Vec3D::add::b.x
    Vec3D::add::out.y = Vec3D::add::a.y + Vec3D::add::b.y
    Vec3D::add::out.z = Vec3D::add::a.z + Vec3D::add::b.z
}

function Vec3D::sub(Vec3D Vec3D::sub::a, Vec3D Vec3D::sub::b, Vec3D *Vec3D::sub::out) {
    Vec3D::sub::out.x = Vec3D::sub::a.x - Vec3D::sub::b.x
    Vec3D::sub::out.y = Vec3D::sub::a.y - Vec3D::sub::b.y
    Vec3D::sub::out.z = Vec3D::sub::a.z - Vec3D::sub::b.z
}

function Vec3D::len(Vec3D Vec3D::len::a, *Vec3D::len::out) {
    # norm of the vector
    Vec3D::len::out = sqrt(Vec3D::len::a.x ** 2 + Vec3D::len::a.y ** 2 + Vec3D::len::a.z ** 2)
}

function Vec3D::normalize(Vec3D Vec3D::normalize::a, Vec3D *Vec3D::normalize::out) {
    Vec3D::normalize::scalar = 1 / sqrt(Vec3D::normalize::a.x ** 2 + Vec3D::normalize::a.y ** 2 + Vec3D::normalize::a.z ** 2)
    Vec3D::normalize::out.x = Vec3D::normalize::a.x * Vec3D::normalize::scalar
    Vec3D::normalize::out.y = Vec3D::normalize::a.y * Vec3D::normalize::scalar
    Vec3D::normalize::out.z = Vec3D::normalize::a.z * Vec3D::normalize::scalar
}

function Vec3D::scalar_product(Vec3D Vec3D::scalar_product::a, Vec3D Vec3D::scalar_product::b, *Vec3D::scalar_product::out) {
    Vec3D::scalar_product::x = Vec3D::scalar_product::a.x * Vec3D::scalar_product::b.x
    Vec3D::scalar_product::y = Vec3D::scalar_product::a.y * Vec3D::scalar_product::b.y
    Vec3D::scalar_product::z = Vec3D::scalar_product::a.z * Vec3D::scalar_product::b.z
    Vec3D::scalar_product::out = Vec3D::scalar_product::x + Vec3D::scalar_product::y + Vec3D::scalar_product::z
}

function Vec3D::angle(Vec3D Vec3D::angle::a, Vec3D Vec3D::angle::b, *Vec3D::angle::alpha) {
    exec Vec3D::scalar_product(Vec3D::angle::a, Vec3D::angle::b, Vec3D::angle::scalar)
    exec Vec3D::len(Vec3D::angle::a, Vec3D::angle::lena)
    exec Vec3D::len(Vec3D::angle::b, Vec3D::angle::lenb)
    Vec3D::angle::cosa = Vec3D::angle::scalar / (Vec3D::angle::lena * Vec3D::angle::lenb)
    exec acos(Vec3D::angle::cosa, Vec3D::angle::alpha)
}

function Vec3D::cross_product(Vec3D Vec3D::cross_product::a, Vec3D Vec3D::cross_product::b, Vec3D *Vec3D::cross_product::out) {
    Vec3D::cross_product::out.x = Vec3D::cross_product::a.y * Vec3D::cross_product::b.z - Vec3D::cross_product::b.y * Vec3D::cross_product::a.z
    Vec3D::cross_product::out.y = Vec3D::cross_product::b.x * Vec3D::cross_product::a.z - Vec3D::cross_product::a.x * Vec3D::cross_product::b.z
    Vec3D::cross_product::out.z = Vec3D::cross_product::a.x * Vec3D::cross_product::b.y - Vec3D::cross_product::b.x * Vec3D::cross_product::a.y
}
