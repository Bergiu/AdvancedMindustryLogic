## Function with parameter
params:
- move_to_x: x coordinate
- move_to_y: y coordinate

Current way:

```
function fn_move {
    set move_tolerance 2 # radius where it is near enough
    ucontrol move move_to_x move_to_y 0 0 0
    # loop: until unit is in the tolerance radius
    ucontrol within move_to_x move_to_y move_tolerance move_is_within 0
    op sub move_is_not_within 1 move_is_within
    op mul move_counter_steps 4 move_is_not_within
    op sub @counter @counter move_counter_steps
    # end: loop
}

set move_to_x bla
set move_to_y blub
exec fn_move
```

New way:

```
function fn_move(move_to_x, move_to_y) {
    set move_tolerance 2 # radius where it is near enough
    ucontrol move move_to_x move_to_y 0 0 0
    # loop: until unit is in the tolerance radius
    ucontrol within move_to_x move_to_y move_tolerance move_is_within 0
    op sub move_is_not_within 1 move_is_within
    op mul move_counter_steps 4 move_is_not_within
    op sub @counter @counter move_counter_steps
    # end: loop
}

exec fn_move(bla, blub)
```

## Inline operations

Current way:

```
op add tmp 8 9
op add x tmp 10
# or
op add tmp @thisx 10
move tmp @thisy
```

New way:

```
x = 8 + 9 + 10
# or
move @thisx + 10 @thisy
move @thisx + 10 @thisy
```

Notice:
- */ before +-: `x = 8 + 9 * 2`

## Operations with braces

```
x = 8 * (9 + 2)
```
