status = cell1
am_pm_switch = switch1
use_average = false

if status == null {
    print "Status Cell is not connected"
    printflush message1
    end
}

if use_average {
    read midnight_time status 4  # average
} else {
    read midnight_time status 3  # last measurement
}

read first_tick status 1
read found_midnight status 7

if not found_midnight {
    print "Waiting for midnight or midday."
    printflush message1
    draw clear 0 0 0 0 0 0
    drawflush display1
    end
}

delta_tick = @tick - first_tick
current_time = ((delta_tick % 83520) / 1305 - midnight_time + 64) % 64  # ranges from 0 to 64

current_real_time = current_time / 64 * 24
real_time_h = current_real_time % 12
real_time_min = (current_real_time % 1) * 60

winkel_h = real_time_h / 12 * 360
winkel_min = real_time_min / 60 * 360
op sin x1 winkel_min 0
op cos y1 winkel_min 0
op sin x2 winkel_h 0
op cos y2 winkel_h 0

x1 = x1 * 30 + 40
y1 = y1 * 30 + 40
x2 = x2 * 20 + 40
y2 = y2 * 20 + 40

# ring
draw poly 40 40 100 36 0 0
draw color 0 0 0 255 0 0
draw poly 40 40 100 35 0 0
# clock hands
draw clear 0 0 0 0 0 0
draw color 255 255 255 255 0 0
draw line 40 40 x1 y1 0 0
draw color 180 180 180 255 0 0
draw line 40 40 x2 y2 0 0
drawflush display1

real_time_h = current_real_time // 1
real_time_min = (current_real_time % 1) * 60 // 1
print "24h Time: "
print real_time_h
print ":"
if real_time_min < 10 {
    print 0
}
print real_time_min
# print 12h
real_time_12h = current_real_time % 12 // 1
print "\n12h Time: "
print real_time_12h
print ":"
if real_time_min < 10 {
    print 0
}
print real_time_min
if current_real_time >= 12 {
    print " PM"
    control enabled am_pm_switch 1 0 0 0
} else {
    print " AM"
    control enabled am_pm_switch 0 0 0 0
}
printflush message1
