data = cell1
status = cell2
message = message1
clock_message = message2

# wait until schematic finished building
if data == null {
    print "Data Cell is not connected"
    printflush message
    end
}
if status == null {
    print "Status Cell is not connected"
    printflush message
    end
}
if clock_message == null {
    print "Message Box is not connected"
    printflush message
    end
}

# add possibility to restart
restart = false
if restart {
    started = 0
    last_power = -1
    old_getting_dark = -1
    midnight = -1
}

if midnight == -1 {
    print "Collecting data to estimate the time."
    printflush clock_message
}

# 1. initialize with start time
if started == 0 {
    print "Initializing"
    printflush message
    # started
    started = 1
    last_power = -1
    old_getting_dark = -1
    midnight = -1
    # first tick
    first_tick = @tick
    end
} else {
    print "Collecting data"
    # second collect data
    tick = @tick - first_tick
    absolute_pos = tick // 1305 # amount of measurements taken since the start
    relative_pos = (tick % 83520) // 1305 # ranges from 0-64
    print "\nRelative pos: "
    print relative_pos
    print "\nAbsolute pos: "
    print absolute_pos
    round_tick = tick // 1
    print "\nTick: "
    print round_tick
    write absolute_pos status 0
    write relative_pos status 1
    sensor power panel1 @powerNetIn
    print "\nPower: "
    round_power = ((power * 100) // 1) / 100
    print round_power
    # calculate if power goes up or down
    if last_power == -1 {
        last_power = power
        printflush message
        end
    }
    print "\nLast Power: "
    last_round_power = ((last_power * 100) // 1) / 100
    print last_round_power
    # dir: 1=up, 0=eq, -1=down
    if power > last_power {
        dir = 1
    } else {
        if power == last_power {
            dir = 0
        } else {
            dir = -1
        }
    }
    last_power = power
    write dir data relative_pos
    print "\nDir: "
    print dir
    print "\nDirs: "
    # round data
    if absolute_pos < 7 {
        printflush message
        end
    }
    i = absolute_pos - 7
    sum_up = 0
    sum_down = 0
    while i < absolute_pos {
        i_ = i % 64
        read old_dir data i_
        print old_dir
        print " "
        if old_dir == 1 {
            sum_up++
        } else {
            if old_dir == -1 {
                sum_down++
            }
        }
        i++
    }
    print "\nSum Up: "
    print sum_up
    print "\nSum down: "
    print sum_down
    if sum_down > sum_up {
        # getting dark
        getting_dark = true
    } else {
        getting_dark = false
    }
    print "\nGetting Dark: "
    print getting_dark
    if old_getting_dark == -1 {
        old_getting_dark = getting_dark
        printflush message
        end
    }
    print "\nOld Getting Dark: "
    print old_getting_dark
    if old_getting_dark != getting_dark {
        # midday or midnight
        if not getting_dark {
            # not sun is rising, so its midnight
            midnight = true
            midnight_time = (relative_pos - 3 + 64) % 64
        } else {
            midnight = false
            midnight_time = (relative_pos - 3 + 32) % 64
        }
    }
    if midnight == -1 {
        print "\nWaiting until midnight or midday."
        printflush message
        end
    }
    old_getting_dark = getting_dark
    print "\nMidnight: "
    print midnight
    print "\nMidnight Time: "
    print midnight_time
    # calculate time
    current_time = (((@tick - first_tick) % 83520) / 1305 - midnight_time + 64) % 64  # ranges from 0 to 64
    round_current_time = current_time * 10 // 1 / 10
    print "\n1/64 Day Time: "
    print round_current_time
    current_real_time = current_time / 64 * 24
    printflush message
    # print 24h
    real_time_h = current_real_time // 1
    real_time_min = (current_real_time % 1) * 60 // 1
    print "24h Time: "
    print real_time_h
    print ":"
    if real_time_min < 10 {
        print 0
    }
    print real_time_min
    # print 12h
    real_time_12h = current_real_time % 12 // 1
    print "\n12h Time: "
    print real_time_12h
    print ":"
    if real_time_min < 10 {
        print 0
    }
    print real_time_min
    if current_real_time // 1 > 12 {
        print " PM"
    } else {
        print " AM"
    }
    printflush clock_message
}
