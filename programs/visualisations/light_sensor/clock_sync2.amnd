data = cell1  # used to save directions
status = cell2  # used for status information
output_cell = cell3
message = message1

# wait until schematic finished building
if data == null {
    print "Data Cell is not connected"
    printflush message
    end
}
if status == null {
    print "Status Cell is not connected"
    printflush message
    end
}

# add possibility to restart
restart = false
if restart {
    started = 0
}

# 1. initialize with start time
if started == 0 {
    started = 1
    print "Initializing"
    printflush message
    # started
    last_power = -1
    old_getting_dark = -1
    midnight = -1
    found_midnight = 0
    midnight_time = -1
    # first tick
    first_tick = @tick
    write started status 0
    write first_tick status 1
    write midnight status 2
    write midnight_time status 3
    write -1 status 4  # midnight time average
    write -1 status 5  # absolute pos
    write -1 status 6  # relative pos
    write found_midnight status 7
    i = 0
    while i < 64 {
        write 0 output_cell i
        i++
    }
    i = 0
    while i < 64 {
        write 0 data i
        i++
    }
    end
} else {
    print "Collecting data"
    # second collect data
    tick = @tick - first_tick
    absolute_pos = tick // 1305 # amount of measurements taken since the start
    relative_pos = (tick % 83520) // 1305 # ranges from 0-64
    print "\nRelative pos: "
    print relative_pos
    print "\nAbsolute pos: "
    print absolute_pos
    round_tick = tick // 1
    print "\nTick: "
    print round_tick
    write absolute_pos status 5
    write relative_pos status 6
    sensor power panel1 @powerNetIn
    print "\nPower: "
    round_power = ((power * 100) // 1) / 100
    print round_power
    # calculate if power goes up or down
    if last_power == -1 {
        last_power = power
        printflush message
        end
    }
    print "\nLast Power: "
    last_round_power = ((last_power * 100) // 1) / 100
    print last_round_power
    # dir: 1=up, 0=eq, -1=down
    if power > last_power {
        dir = 1
    } else {
        if power == last_power {
            dir = 0
        } else {
            dir = -1
        }
    }
    last_power = power
    write dir data relative_pos
    print "\nDir: "
    print dir
    print "\nDirs: "
    # round data
    if absolute_pos < 7 {
        printflush message
        end
    }
    i = absolute_pos - 7
    sum_up = 0
    sum_down = 0
    while i < absolute_pos {
        i_ = i % 64
        read old_dir data i_
        print old_dir
        print " "
        if old_dir == 1 {
            sum_up++
        } else {
            if old_dir == -1 {
                sum_down++
            }
        }
        i++
    }
    # the program calculates when the sun is going up or down and when this switches its midnight or midday.
    # in some sectors the sun is at it's maximum for a longer time, so the switching is calculated wrong.
    # longer max is a variable that contains it this is true for the current sector. in this case the calculation
    # is only done during midnight.
    sum_eq = 7 - sum_up - sum_down
    if sum_eq > 0 {
        longer_max = true
    }
    print "\nSum Up: "
    print sum_up
    print "\nSum down: "
    print sum_down
    if sum_down > sum_up {
        # getting dark
        getting_dark = true
    } else {
        getting_dark = false
    }
    print "\nGetting Dark: "
    print getting_dark
    if old_getting_dark == -1 {
        old_getting_dark = getting_dark
        printflush message
        end
    }
    print "\nOld Getting Dark: "
    print old_getting_dark
    if getting_dark and longer_max and midnight == -1 {
        print "\nWait until midnight."
        printflush message
        old_getting_dark = getting_dark
        end
    }
    if old_getting_dark != getting_dark {
        # midday or midnight
        changed = false
        if not getting_dark {
            # not sun is rising, so its midnight
            midnight = true
            midnight_time = (relative_pos - 3 + 64) % 64
            changed = true
        } else {
            if not longer_max {
                midnight = false
                midnight_time = (relative_pos - 3 + 32) % 64
                changed = true
            }
        }
        if changed {
            # save midnight time in output cell for mean midnight time
            write midnight status 2
            write midnight_time status 3
            # increase length
            read len output_cell 0
            if len < 62 {
                new_len = len + 1
                write new_len output_cell 0
            }
            # increase position
            read pos output_cell 1
            new_pos = (pos + 1) % 62
            new_pos_ = new_pos + 1
            write new_pos output_cell 1
            # save midnight time
            write midnight_time output_cell new_pos_
        }
    }
    if midnight == -1 {
        print "\nWaiting until midnight or midday."
        printflush message
        end
    }
    old_getting_dark = getting_dark
    found_midnight = 1
    write found_midnight status 7
    print "\nMidnight: "
    print midnight
    print "\nMidnight Time: "
    print midnight_time
    printflush message
}
