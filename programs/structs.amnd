# # Vec3D
struct Vec3D(x, y, z)
struct Vec2D(x, y)


# # struct Triangle(Vec3D A, Vec3D B, Vec3D C)

# # new a = Vec3D(1,2,3)
# # new b = Vec3D(2,2,3)
# # new c = Vec3D(1,2,0)
# # new T1 = Vec3D(a, b, c)
# # print T1.A.x

# function Vec2D::scale(Vec2D *vec, alpha) {
#     vec.x *= alpha
#     vec.y *= alpha
# }

# function Vec2D::dist(Vec2D vec, *out) {
#     out = vec.x + vec.y
# }


# new A = Vec2D(1, 2)

# exec Vec2D::scale(A, 7)
# exec Vec2D::dist(A, dist)

# print dist
# printflush message1

function Vec2D::rot(Vec2D this, alpha, Vec2D *out) {
    sina = sin(alpha)
    cosa = cos(alpha)
    out.x = cosa * this.x - sina * this.y
    out.y = sina * this.x + cosa * this.y
}

function Vec3D::rot_x(Vec3D this, alpha, Vec3D *out) {
    sina = sin(alpha)
    cosa = cos(alpha)
    out.x = this.x
    out.y = cosa * this.y - sina * this.z
    out.z = sina * this.y + cosa * this.z
}


function Vec3D::rot_y(Vec3D this, alpha, Vec3D *out) {
    sina = sin(alpha)
    cosa = cos(alpha)
    out.x = cosa * this.x + sina * this.z
    out.y = this.y
    out.z = cosa * this.z - sina * this.x
}


function Vec3D::rot_z(Vec3D this, alpha, Vec3D *out) {
    sina = sin(alpha)
    cosa = cos(alpha)
    out.x = cosa * this.x - sina * this.y
    out.y = sina * this.x + cosa * this.y
    out.z = this.z
}
