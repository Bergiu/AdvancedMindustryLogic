# # Vec3D
# # x, y, z

# function Vec3D::rot(this: Vec3D, alpha) {
#     this.x = "name".x
#     this.y = "name".y
#     this.z = "name".z
#     this.x = cos(alpha) * this.x
#     this.y = sin(alpha) * this.y
# }

# function Vec3D::rot(*this: Vec3D, alpha) {
#     this.x = "name".x
#     this.y = "name".y
#     this.z = "name".z
#     this.x = cos(alpha) * this.x
#     this.y = sin(alpha) * this.y
#     "name".x = this.x
#     "name".y = this.y
#     "name".z = this.z
# }



# # struct Triangle(A: Vec3D, B: Vec3D, C: Vec3D)

# # new a = Vec3D(1,2,3)
# # new b = Vec3D(2,2,3)
# # new c = Vec3D(1,2,0)
# # new T1 = Vec3D(a, b, c)
# # T1.A.x

struct Vec2D(x, y)

function Vec2D::scale(Vec2D *vec, alpha) {
    vec.x *= alpha
    vec.y *= alpha
}

function Vec2D::dist(Vec2D vec, *out) {
    out = vec.x + vec.y
}


new A = Vec2D(1, 2)

exec Vec2D::scale(A, 7)
exec Vec2D::dist(A, dist)
print dist
printflush message1
